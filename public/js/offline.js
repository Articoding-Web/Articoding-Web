let t;const n=new Uint8Array(16);function e(){if(!t&&(t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!t))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return t(n)}const o=[];for(let t=0;t<256;++t)o.push((t+256).toString(16).slice(1));var r={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};function a(t,n,a){if(r.randomUUID&&!n&&!t)return r.randomUUID();const c=(t=t||{}).random||(t.rng||e)();if(c[6]=15&c[6]|64,c[8]=63&c[8]|128,n){a=a||0;for(let t=0;t<16;++t)n[a+t]=c[t];return n}return function(t,n=0){return o[t[n+0]]+o[t[n+1]]+o[t[n+2]]+o[t[n+3]]+"-"+o[t[n+4]]+o[t[n+5]]+"-"+o[t[n+6]]+o[t[n+7]]+"-"+o[t[n+8]]+o[t[n+9]]+"-"+o[t[n+10]]+o[t[n+11]]+o[t[n+12]]+o[t[n+13]]+o[t[n+14]]+o[t[n+15]]}(c)}let c=localStorage.getItem("MY_UUID");c||(c=a(),localStorage.setItem("MY_UUID",c));class s extends Error{status;constructor(t,n){super(n),this.status=t}}async function i(){history.pushState({},"","offline.html"),navigator&&navigator.serviceWorker&&(console.warn("Llego a setContent"),await caches.keys().then((function(t){return t.filter((function(t){return t.includes("_levels")})).forEach((function(t){console.log("Cache name:",t);const n=document.getElementById("principal");console.log(n),caches.open(t).then((function(t){t.keys().then((function(t){n.innerHTML="<ul>"+t.map((async function(t){console.log(t);return`<li>${function(t){if(!t)throw new Error("Invalid level data");const{id:n,miniature:e,title:o,description:r="Blockleap level"}=t;return`\n        <div class="col">\n          <div class="card mx-auto border-dark">\n            <a class="getLevel" href="/level/${n}">\n              <div class="row g-0 text-dark">\n                <div class="col-md-3">\n                  ${e?`<img src="${e}" class="img-fluid rounded-start" alt="${o}">`:""}\n                </div>\n                <div class="col-md-9">\n                  <div class="card-body">\n                    <div class="row row-cols-1 row-cols-md-2">\n                      <div class="col">\n                        <h5 class="card-title">${o}</h5>\n                        <p class="card-text">${r}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </a>\n          </div>\n        </div>`}(await async function(t,n,e,o){try{const r=await fetch(t,{method:n,headers:{"Content-Type":"application/json"},credentials:o,body:e});if(!r.ok)throw new s(r.status,`${n} request to ${t} failed with status ${r.status}`);return await r.json()}catch(t){throw console.error(t),t}}(t.url,"GET"))}</li>`})).join("")+"</ul>"}))}))}))})))}a(),async function(){await i(),async function(){document.querySelectorAll(".offlineLevel").forEach((t=>t.addEventListener("click",(function(t){t.preventDefault(),this.href.split("level/")[1]}))))}()}();
//# sourceMappingURL=offline.js.map
